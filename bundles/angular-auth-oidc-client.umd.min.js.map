{"version":3,"file":"angular-auth-oidc-client.umd.min.js","sources":["../../src/services/oidc.security.service.ts","../../src/modules/auth.module.ts","../../src/modules/auth.configuration.ts","../../src/services/oidc.security.storage.ts","../../src/services/oidc.security.common.ts","../../src/services/oidc.security.validation.ts","../../src/services/auth.well-known-endpoints.ts","../../src/services/oidc.security.check-session.ts","../../src/services/oidc.security.silent-renew.ts","../../src/services/oidc.security.user-service.ts","../../src/services/authorization-result.enum.ts","../../src/services/uri-encoder.ts"],"sourcesContent":["import { PLATFORM_ID, Inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { isPlatformBrowser } from '@angular/common';\r\nimport { Injectable, EventEmitter, Output } from '@angular/core';\r\nimport'rxjs/add/operator/map';\r\nimport'rxjs/add/operator/catch';\r\nimport'rxjs/add/operator/timeInterval';\r\nimport'rxjs/add/operator/pluck';\r\nimport'rxjs/add/operator/take';\r\nimport'rxjs/add/observable/interval';\r\nimport'rxjs/add/observable/timer';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Router } from '@angular/router';\r\nimport { AuthConfiguration, OpenIDImplicitFlowConfiguration } from '../modules/auth.configuration';\r\nimport { OidcSecurityValidation } from './oidc.security.validation';\r\nimport { OidcSecurityCheckSession } from './oidc.security.check-session';\r\nimport { OidcSecuritySilentRenew } from './oidc.security.silent-renew';\r\nimport { OidcSecurityUserService } from './oidc.security.user-service';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { AuthWellKnownEndpoints } from './auth.well-known-endpoints';\r\nimport { JwtKeys } from './jwtkeys';\r\nimport { AuthorizationResult } from './authorization-result.enum';\r\nimport { UriEncoder } from './uri-encoder';\nexport class OidcSecurityService {\r\n\r\n     onModuleSetup: EventEmitter<any> = new EventEmitter<any>(true);\r\n     onAuthorizationResult: EventEmitter<AuthorizationResult> = new EventEmitter<AuthorizationResult>(true);\r\n\r\n    checkSessionChanged: boolean;\r\n    moduleSetup = false;\nprivate _isAuthorized = new BehaviorSubject<boolean>(false);\nprivate _isAuthorizedValue: boolean;\nprivate lastUserData: any = undefined;\nprivate _userData = new BehaviorSubject<any>('');\nprivate oidcSecurityValidation: OidcSecurityValidation;\nprivate jwtKeys: JwtKeys;\nprivate authWellKnownEndpointsLoaded = false;\nprivate runTokenValidationRunning: boolean;\n/**\n * @param {?} platformId\n * @param {?} http\n * @param {?} authConfiguration\n * @param {?} router\n * @param {?} oidcSecurityCheckSession\n * @param {?} oidcSecuritySilentRenew\n * @param {?} oidcSecurityUserService\n * @param {?} oidcSecurityCommon\n * @param {?} authWellKnownEndpoints\n */\nconstructor(\nprivate platformId: Object,\nprivate http: HttpClient,\nprivate authConfiguration: AuthConfiguration,\nprivate router: Router,\nprivate oidcSecurityCheckSession: OidcSecurityCheckSession,\nprivate oidcSecuritySilentRenew: OidcSecuritySilentRenew,\nprivate oidcSecurityUserService: OidcSecurityUserService,\nprivate oidcSecurityCommon: OidcSecurityCommon,\nprivate authWellKnownEndpoints: AuthWellKnownEndpoints\r\n    ) {\r\n    }\n/**\n * @param {?} openIDImplicitFlowConfiguration\n * @return {?}\n */\nsetupModule(openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration): void {\r\n\r\n        this.authConfiguration.init(openIDImplicitFlowConfiguration);\r\n        this.oidcSecurityValidation = new OidcSecurityValidation(this.oidcSecurityCommon);\r\n\r\n        this.oidcSecurityCheckSession.onCheckSessionChanged.subscribe(() => { this.onCheckSessionChanged(); });\r\n        this.authWellKnownEndpoints.onWellKnownEndpointsLoaded.subscribe(() => { this.onWellKnownEndpointsLoaded(); });\r\n        this._userData.subscribe(() => { this.onUserDataChanged(); });\r\n\r\n        this.oidcSecurityCommon.setupModule();\r\n\r\n        const /** @type {?} */ userData = this.oidcSecurityCommon.userData;\r\n        if (userData !== '') {\r\n            this.setUserData(userData);\r\n        }\r\n\r\n        const /** @type {?} */ isAuthorized = this.oidcSecurityCommon.isAuthorized;\r\n        if (isAuthorized !== undefined) {\r\n            this.setIsAuthorized(isAuthorized);\r\n\r\n            // Start the silent renew\r\n            this.runTokenValidation();\r\n        }\r\n\r\n        this.oidcSecurityCommon.logDebug('STS server: ' + this.authConfiguration.stsServer);\r\n\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            // Client only code.\r\n            this.authWellKnownEndpoints.onWellKnownEndpointsLoaded.subscribe(() => {\r\n                this.moduleSetup = true;\r\n                this.onModuleSetup.emit();\r\n\r\n                if (this.authConfiguration.silent_renew) {\r\n                    this.oidcSecuritySilentRenew.initRenew();\r\n                }\r\n\r\n                if (this.authConfiguration.start_checksession) {\r\n                    this.oidcSecurityCheckSession.init().subscribe(() => {\r\n                        this.oidcSecurityCheckSession.pollServerSession(this.authConfiguration.client_id);\r\n                    });\r\n                }\r\n            });\r\n\r\n            this.authWellKnownEndpoints.setupModule();\r\n        } else {\r\n            this.moduleSetup = true;\r\n            this.onModuleSetup.emit();\r\n        }\r\n    }\n/**\n * @return {?}\n */\ngetUserData(): Observable<any> {\r\n        return this._userData.asObservable();\r\n    }\n/**\n * @param {?} userData\n * @return {?}\n */\nprivate setUserData(userData: any): void {\r\n        this.oidcSecurityCommon.userData = userData;\r\n        this._userData.next(userData);\r\n    }\n/**\n * @return {?}\n */\ngetIsAuthorized(): Observable<boolean> {\r\n        return this._isAuthorized.asObservable();\r\n    }\n/**\n * @param {?} isAuthorized\n * @return {?}\n */\nprivate setIsAuthorized(isAuthorized: boolean): void {\r\n        this._isAuthorizedValue = isAuthorized;\r\n        this._isAuthorized.next(isAuthorized);\r\n    }\n/**\n * @return {?}\n */\ngetToken(): any {\r\n        if (!this._isAuthorizedValue) {\r\n            return '';\r\n        }\r\n\r\n        let /** @type {?} */ token = this.oidcSecurityCommon.getAccessToken();\r\n        return decodeURIComponent(token);\r\n    }\n/**\n * @return {?}\n */\ngetIdToken(): any {\r\n        if (!this._isAuthorizedValue) {\r\n            return '';\r\n        }\r\n\r\n        let /** @type {?} */ token = this.oidcSecurityCommon.getIdToken();\r\n        return decodeURIComponent(token);\r\n    }\n/**\n * @param {?=} encode\n * @return {?}\n */\ngetPayloadFromIdToken(encode = false): any {\r\n        const /** @type {?} */ token = this.getIdToken();\r\n        return this.oidcSecurityValidation.getPayloadFromToken(token, encode);\r\n    }\n/**\n * @param {?} state\n * @return {?}\n */\nsetState(state: string): void {\r\n        this.oidcSecurityCommon.authStateControl = state;\r\n    }\n/**\n * @return {?}\n */\ngetState(): string {\r\n        return this.oidcSecurityCommon.authStateControl;\r\n    }\n/**\n * @param {?} params\n * @return {?}\n */\nsetCustomRequestParameters(params: { [key: string]: string | number | boolean }) {\r\n        this.oidcSecurityCommon.customRequestParams = params;\r\n    }\n/**\n * @return {?}\n */\nauthorize() {\r\n\r\n        let /** @type {?} */ data = this.oidcSecurityCommon.wellKnownEndpoints;\r\n        if (data && data !== '') {\r\n            this.authWellKnownEndpointsLoaded = true;\r\n        }\r\n\r\n        if (!this.authWellKnownEndpointsLoaded) {\r\n            this.oidcSecurityCommon.logError('Well known endpoints must be loaded before user can login!')\r\n            return;\r\n        }\r\n\r\n        if (!this.oidcSecurityValidation.config_validate_response_type(this.authConfiguration.response_type)) {\r\n            // invalid response_type\r\n            return;\r\n        }\r\n\r\n        this.resetAuthorizationData(false);\r\n\r\n        this.oidcSecurityCommon.logDebug('BEGIN Authorize, no auth data');\r\n\r\n        let /** @type {?} */ state = this.oidcSecurityCommon.authStateControl;\r\n        if (state === '' || state === null) {\r\n            state = Date.now() + '' + Math.random();\r\n            this.oidcSecurityCommon.authStateControl = state;\r\n        }\r\n\r\n        let /** @type {?} */ nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.authNonce = nonce;\r\n        this.oidcSecurityCommon.logDebug('AuthorizedController created. local state: ' + this.oidcSecurityCommon.authStateControl);\r\n\r\n        let /** @type {?} */ url = this.createAuthorizeUrl(nonce, state, this.authWellKnownEndpoints.authorization_endpoint);\r\n        window.location.href = url;\r\n    }\n/**\n * @param {?=} hash\n * @return {?}\n */\nauthorizedCallback(hash?: string) {\r\n        let /** @type {?} */ silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n        let /** @type {?} */ isRenewProcess = (silentRenew === 'running');\r\n\r\n        this.oidcSecurityCommon.logDebug('BEGIN authorizedCallback, no auth data');\r\n        this.resetAuthorizationData(isRenewProcess);\r\n\r\n        hash = hash || window.location.hash.substr(1);\r\n\r\n        let /** @type {?} */ result: any = hash.split('&').reduce(function (result: any, item: string) {\r\n            let /** @type {?} */ parts = item.split('=');\r\n            result[parts[0]] = parts[1];\r\n            return result;\r\n        }, {});\r\n        this.oidcSecurityCommon.authResult = result;\r\n\r\n        this.oidcSecurityCommon.logDebug(result);\r\n        this.oidcSecurityCommon.logDebug('authorizedCallback created, begin token validation');\r\n\r\n        let /** @type {?} */ access_token = '';\r\n        let /** @type {?} */ id_token = '';\r\n        let /** @type {?} */ authResponseIsValid = false;\r\n        let /** @type {?} */ decoded_id_token: any;\r\n\r\n        this.getSigningKeys()\r\n            .subscribe(jwtKeys => {\r\n                this.jwtKeys = jwtKeys;\r\n\r\n                if (!result.error) {\r\n\r\n                    // validate state\r\n                    if (this.oidcSecurityValidation.validateStateFromHashCallback(result.state, this.oidcSecurityCommon.authStateControl)) {\r\n                        if (this.authConfiguration.response_type === 'id_token token') {\r\n                            access_token = result.access_token;\r\n                        }\r\n                        id_token = result.id_token;\r\n\r\n                        decoded_id_token = this.oidcSecurityValidation.getPayloadFromToken(id_token, false);\r\n\r\n                        // validate jwt signature\r\n                        if (this.oidcSecurityValidation.validate_signature_id_token(id_token, this.jwtKeys)) {\r\n                            // validate nonce\r\n                            if (this.oidcSecurityValidation.validate_id_token_nonce(decoded_id_token, this.oidcSecurityCommon.authNonce)) {\r\n                                // validate required fields id_token\r\n                                if (this.oidcSecurityValidation.validate_required_id_token(decoded_id_token)) {\r\n                                    // validate max offset from the id_token issue to now\r\n                                    if (this.oidcSecurityValidation.validate_id_token_iat_max_offset(decoded_id_token, this.authConfiguration.max_id_token_iat_offset_allowed_in_seconds)) {\r\n                                        // validate iss\r\n                                        if (this.oidcSecurityValidation.validate_id_token_iss(decoded_id_token, this.authWellKnownEndpoints.issuer)) {\r\n                                            // validate aud\r\n                                            if (this.oidcSecurityValidation.validate_id_token_aud(decoded_id_token, this.authConfiguration.client_id)) {\r\n                                                // validate_id_token_exp_not_expired\r\n                                                if (this.oidcSecurityValidation.validate_id_token_exp_not_expired(decoded_id_token)) {\r\n                                                    // flow id_token token\r\n                                                    if (this.authConfiguration.response_type === 'id_token token') {\r\n                                                        // valiadate at_hash and access_token\r\n                                                        if (this.oidcSecurityValidation.validate_id_token_at_hash(access_token, decoded_id_token.at_hash) || !access_token) {\r\n                                                            authResponseIsValid = true;\r\n                                                            this.successful_validation();\r\n                                                        } else {\r\n                                                            this.oidcSecurityCommon.logWarning('authorizedCallback incorrect at_hash');\r\n                                                        }\r\n                                                    } else {\r\n                                                        authResponseIsValid = true;\r\n                                                        this.successful_validation();\r\n                                                    }\r\n                                                } else {\r\n                                                    this.oidcSecurityCommon.logWarning('authorizedCallback token expired');\r\n                                                }\r\n                                            } else {\r\n                                                this.oidcSecurityCommon.logWarning('authorizedCallback incorrect aud');\r\n                                            }\r\n                                        } else {\r\n                                            this.oidcSecurityCommon.logWarning('authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer');\r\n                                        }\r\n                                    } else {\r\n                                        this.oidcSecurityCommon.logWarning('authorizedCallback Validation, iat rejected id_token was issued too far away from the current time');\r\n                                    }\r\n                                } else {\r\n                                    this.oidcSecurityCommon.logDebug('authorizedCallback Validation, one of the REQUIRED properties missing from id_token');\r\n                                }\r\n                            } else {\r\n                                this.oidcSecurityCommon.logWarning('authorizedCallback incorrect nonce');\r\n                            }\r\n                        } else {\r\n                            this.oidcSecurityCommon.logDebug('authorizedCallback Signature validation failed id_token');\r\n                        }\r\n                    } else {\r\n                        this.oidcSecurityCommon.logWarning('authorizedCallback incorrect state');\r\n                    }\r\n                }\r\n\r\n                this.oidcSecurityCommon.silentRenewRunning = '';\r\n\r\n                if (authResponseIsValid) {\r\n                    this.setAuthorizationData(access_token, id_token);\r\n                    if (this.authConfiguration.auto_userinfo) {\r\n                        this.getUserinfo(isRenewProcess, result, id_token, decoded_id_token).subscribe((response) => {\r\n                            if (response) {\r\n                                if (this.authConfiguration.trigger_authorization_result_event) {\r\n                                    this.onAuthorizationResult.emit(AuthorizationResult.authorized);\r\n                                } else {\r\n                                    this.router.navigate([this.authConfiguration.post_login_route]);\r\n                                }\r\n                            } else {\r\n                                if (this.authConfiguration.trigger_authorization_result_event) {\r\n                                    this.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\r\n                                } else {\r\n                                    this.router.navigate([this.authConfiguration.unauthorized_route]);\r\n                                }\r\n                            }\r\n                        });\r\n                    } else {\r\n                        this.runTokenValidation();\r\n                        if (this.authConfiguration.trigger_authorization_result_event) {\r\n                            this.onAuthorizationResult.emit(AuthorizationResult.authorized);\r\n                        } else {\r\n                            this.router.navigate([this.authConfiguration.post_login_route]);\r\n                        }\r\n                    }\r\n                } else { // something went wrong\r\n                    this.oidcSecurityCommon.logDebug('authorizedCallback, token(s) validation failed, resetting');\r\n                    this.resetAuthorizationData(false);\r\n                    if (this.authConfiguration.trigger_authorization_result_event) {\r\n                        this.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\r\n                    } else {\r\n                        this.router.navigate([this.authConfiguration.unauthorized_route]);\r\n                    }\r\n                }\r\n            });\r\n    }\n/**\n * @param {?=} isRenewProcess\n * @param {?=} result\n * @param {?=} id_token\n * @param {?=} decoded_id_token\n * @return {?}\n */\ngetUserinfo(isRenewProcess = false, result?: any, id_token?: any, decoded_id_token?: any): Observable<boolean> {\r\n        result = result ? result : this.oidcSecurityCommon.authResult;\r\n        id_token = id_token ? id_token : this.oidcSecurityCommon.idToken;\r\n        decoded_id_token = decoded_id_token ? decoded_id_token : this.oidcSecurityValidation.getPayloadFromToken(id_token, false);\r\n\r\n        return new Observable<boolean>(observer => {\r\n            // flow id_token token\r\n            if (this.authConfiguration.response_type === 'id_token token') {\r\n                if (isRenewProcess) {\r\n                    this.oidcSecurityCommon.sessionState = result.session_state;\r\n                    observer.next(true);\r\n                    observer.complete();\r\n                } else {\r\n                    this.oidcSecurityUserService.initUserData()\r\n                        .subscribe(() => {\r\n                            this.oidcSecurityCommon.logDebug('authorizedCallback id_token token flow');\r\n                            if (this.oidcSecurityValidation.validate_userdata_sub_id_token(decoded_id_token.sub, this.oidcSecurityUserService.userData.sub)) {\r\n                                this.setUserData(this.oidcSecurityUserService.userData);\r\n                                this.oidcSecurityCommon.logDebug(this.oidcSecurityCommon.accessToken);\r\n                                this.oidcSecurityCommon.logDebug(this.oidcSecurityUserService.userData);\r\n\r\n                                this.oidcSecurityCommon.sessionState = result.session_state;\r\n\r\n                                this.runTokenValidation();\r\n                                observer.next(true);\r\n                            } else { // something went wrong, userdata sub does not match that from id_token\r\n                                this.oidcSecurityCommon.logWarning('authorizedCallback, User data sub does not match sub in id_token');\r\n                                this.oidcSecurityCommon.logDebug('authorizedCallback, token(s) validation failed, resetting');\r\n                                this.resetAuthorizationData(false);\r\n                                observer.next(false);\r\n                            }\r\n                            observer.complete();\r\n                        });\r\n                }\r\n            } else { // flow id_token\r\n                this.oidcSecurityCommon.logDebug('authorizedCallback id_token flow');\r\n                this.oidcSecurityCommon.logDebug(this.oidcSecurityCommon.accessToken);\r\n\r\n                // userData is set to the id_token decoded. No access_token.\r\n                this.oidcSecurityUserService.userData = decoded_id_token;\r\n                this.setUserData(this.oidcSecurityUserService.userData);\r\n\r\n                this.oidcSecurityCommon.sessionState = result.session_state;\r\n\r\n                if (!isRenewProcess) {\r\n                    this.runTokenValidation();\r\n                }\r\n\r\n                observer.next(true);\r\n                observer.complete();\r\n            }\r\n        });\r\n    }\n/**\n * @return {?}\n */\nlogoff() {\r\n        // /connect/endsession?id_token_hint=...&post_logout_redirect_uri=https://myapp.com\r\n        this.oidcSecurityCommon.logDebug('BEGIN Authorize, no auth data');\r\n\r\n        if (this.authWellKnownEndpoints.end_session_endpoint) {\r\n            let /** @type {?} */ end_session_endpoint = this.authWellKnownEndpoints.end_session_endpoint;\r\n            let /** @type {?} */ id_token_hint = this.oidcSecurityCommon.idToken;\r\n            let /** @type {?} */ url = this.createEndSessionUrl(end_session_endpoint, id_token_hint);\r\n\r\n            this.resetAuthorizationData(false);\r\n\r\n            if (this.authConfiguration.start_checksession && this.checkSessionChanged) {\r\n                this.oidcSecurityCommon.logDebug('only local login cleaned up, server session has changed');\r\n            } else {\r\n                window.location.href = url;\r\n            }\r\n        } else {\r\n            this.resetAuthorizationData(false);\r\n            this.oidcSecurityCommon.logDebug('only local login cleaned up, no end_session_endpoint');\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprivate successful_validation() {\r\n        this.oidcSecurityCommon.authNonce = '';\r\n\r\n        if (this.authConfiguration.auto_clean_state_after_authentication) {\r\n            this.oidcSecurityCommon.authStateControl = '';\r\n        }\r\n        this.oidcSecurityCommon.logDebug('AuthorizedCallback token(s) validated, continue');\r\n    }\n/**\n * @return {?}\n */\nprivate refreshSession() {\r\n        this.oidcSecurityCommon.logDebug('BEGIN refresh session Authorize');\r\n\r\n        let /** @type {?} */ state = this.oidcSecurityCommon.authStateControl;\r\n        if (state === '' || state === null) {\r\n            state = Date.now() + '' + Math.random();\r\n            this.oidcSecurityCommon.authStateControl = state;\r\n        }\r\n\r\n        let /** @type {?} */ nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.authNonce = nonce;\r\n        this.oidcSecurityCommon.logDebug('RefreshSession created. adding myautostate: ' + this.oidcSecurityCommon.authStateControl);\r\n\r\n        let /** @type {?} */ url = this.createAuthorizeUrl(nonce, state, this.authWellKnownEndpoints.authorization_endpoint, 'none');\r\n\r\n        this.oidcSecurityCommon.silentRenewRunning = 'running';\r\n        this.oidcSecuritySilentRenew.startRenew(url);\r\n    }\n/**\n * @param {?} access_token\n * @param {?} id_token\n * @return {?}\n */\nprivate setAuthorizationData(access_token: any, id_token: any) {\r\n        if (this.oidcSecurityCommon.accessToken !== '') {\r\n            this.oidcSecurityCommon.accessToken = '';\r\n        }\r\n\r\n        this.oidcSecurityCommon.logDebug(access_token);\r\n        this.oidcSecurityCommon.logDebug(id_token);\r\n        this.oidcSecurityCommon.logDebug('storing to storage, getting the roles');\r\n        this.oidcSecurityCommon.accessToken = access_token;\r\n        this.oidcSecurityCommon.idToken = id_token;\r\n        this.setIsAuthorized(true);\r\n        this.oidcSecurityCommon.isAuthorized = true;\r\n    }\n/**\n * @param {?} nonce\n * @param {?} state\n * @param {?} authorization_endpoint\n * @param {?=} prompt\n * @return {?}\n */\nprivate createAuthorizeUrl(nonce: string, state: string, authorization_endpoint: string, prompt?: string): string {\r\n\r\n        let /** @type {?} */ urlParts = authorization_endpoint.split('?');\r\n        let /** @type {?} */ authorizationUrl = urlParts[0];\r\n        let /** @type {?} */ params = new HttpParams({ fromString: urlParts[1], encoder: new UriEncoder() });\r\n        params = params.set('client_id', this.authConfiguration.client_id);\r\n        params = params.append('redirect_uri', this.authConfiguration.redirect_url);\r\n        params = params.append('response_type', this.authConfiguration.response_type);\r\n        params = params.append('scope', this.authConfiguration.scope);\r\n        params = params.append('nonce', nonce);\r\n        params = params.append('state', state);\r\n        if (prompt) {\r\n            params = params.append('prompt', prompt);\r\n        }\r\n        if (this.authConfiguration.hd_param) {\r\n            params = params.append('hd', this.authConfiguration.hd_param);\r\n        }\r\n\r\n        let /** @type {?} */ customParams = Object.assign({}, this.oidcSecurityCommon.customRequestParams);\r\n\r\n        Object.keys(customParams).forEach(key => {\r\n            params = params.append(key, customParams[key].toString());\r\n        });\r\n\r\n        return `${authorizationUrl}?${params}`;\r\n    }\n/**\n * @param {?} end_session_endpoint\n * @param {?} id_token_hint\n * @return {?}\n */\nprivate createEndSessionUrl(end_session_endpoint: string, id_token_hint: string) {\r\n        let /** @type {?} */ urlParts = end_session_endpoint.split('?');\r\n\r\n        let /** @type {?} */ authorizationEndsessionUrl = urlParts[0];\r\n\r\n        let /** @type {?} */ params = new HttpParams({ fromString: urlParts[1], encoder: new UriEncoder() });\r\n        params = params.set('id_token_hint', id_token_hint);\r\n        params = params.append('post_logout_redirect_uri', this.authConfiguration.post_logout_redirect_uri);\r\n\r\n        return `${authorizationEndsessionUrl}?${params}`;\r\n    }\n/**\n * @param {?} isRenewProcess\n * @return {?}\n */\nprivate resetAuthorizationData(isRenewProcess: boolean) {\r\n        if (!isRenewProcess) {\r\n            if (this.authConfiguration.auto_userinfo) {\r\n                // Clear user data. Fixes #97.\r\n                this.setUserData('');\r\n            }\r\n            this.setIsAuthorized(false);\r\n            this.oidcSecurityCommon.resetStorageData(isRenewProcess);\r\n            this.checkSessionChanged = false;\r\n        }\r\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nhandleError(error: any) {\r\n        this.oidcSecurityCommon.logError(error);\r\n        if (error.status == 403) {\r\n            if (this.authConfiguration.trigger_authorization_result_event) {\r\n                this.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\r\n            } else {\r\n                this.router.navigate([this.authConfiguration.forbidden_route]);\r\n            }\r\n        } else if (error.status == 401) {\r\n            let /** @type {?} */ silentRenew = this.oidcSecurityCommon.silentRenewRunning;\r\n            this.resetAuthorizationData(silentRenew !== '');\r\n            if (this.authConfiguration.trigger_authorization_result_event) {\r\n                this.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\r\n            } else {\r\n                this.router.navigate([this.authConfiguration.unauthorized_route]);\r\n            }\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprivate onCheckSessionChanged() {\r\n        this.oidcSecurityCommon.logDebug('onCheckSessionChanged');\r\n        this.checkSessionChanged = true;\r\n    }\n/**\n * @return {?}\n */\nprivate onWellKnownEndpointsLoaded() {\r\n        this.oidcSecurityCommon.logDebug('onWellKnownEndpointsLoaded');\r\n        this.authWellKnownEndpointsLoaded = true;\r\n    }\n/**\n * @return {?}\n */\nprivate onUserDataChanged() {\r\n        this.oidcSecurityCommon.logDebug(`onUserDataChanged: last = ${this.lastUserData}, new = ${this._userData.value}`);\r\n\r\n        if (this.lastUserData && !this._userData.value) {\r\n            this.oidcSecurityCommon.logDebug('onUserDataChanged: Logout detected.');\r\n            // TODO should we have an action here\r\n        }\r\n        this.lastUserData = this._userData.value;\r\n    }\n/**\n * @return {?}\n */\nprivate getSigningKeys(): Observable<JwtKeys> {\r\n        this.oidcSecurityCommon.logDebug('jwks_uri: ' + this.authWellKnownEndpoints.jwks_uri);\r\n        return this.http.get<JwtKeys>(this.authWellKnownEndpoints.jwks_uri)\r\n            .catch(this.handleErrorGetSigningKeys);\r\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleErrorGetSigningKeys(error: Response | any) {\r\n        let /** @type {?} */ errMsg: string;\r\n        if (error instanceof Response) {\r\n            const /** @type {?} */ body = error.json() || {};\r\n            const /** @type {?} */ err = JSON.stringify(body);\r\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n        } else {\r\n            errMsg = error.message ? error.message : error.toString();\r\n        }\r\n        console.error(errMsg);\r\n        return Observable.throw(errMsg);\r\n    }\n/**\n * @return {?}\n */\nprivate runTokenValidation() {\r\n        if (this.runTokenValidationRunning) {\r\n            return;\r\n        }\r\n        this.runTokenValidationRunning = true;\r\n        let /** @type {?} */ source = Observable.timer(5000, 3000)\r\n            .timeInterval()\r\n            .pluck('interval')\r\n            .take(10000);\r\n\r\n        source.subscribe(() => {\r\n            if (this._userData.value) {\r\n                if (this.oidcSecurityValidation.isTokenExpired(this.oidcSecurityCommon.idToken, this.authConfiguration.silent_renew_offset_in_seconds)) {\r\n                    this.oidcSecurityCommon.logDebug('IsAuthorized: id_token isTokenExpired, start silent renew if active');\r\n\r\n                    if (this.authConfiguration.silent_renew) {\r\n                        this.refreshSession();\r\n                    } else {\r\n                        this.resetAuthorizationData(false);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n            (err: any) => {\r\n                this.oidcSecurityCommon.logError('Error: ' + err);\r\n            },\r\n            () => {\r\n                this.oidcSecurityCommon.logDebug('Completed');\r\n            });\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID, ] }, ]},\n{type: HttpClient, },\n{type: AuthConfiguration, },\n{type: Router, },\n{type: OidcSecurityCheckSession, },\n{type: OidcSecuritySilentRenew, },\n{type: OidcSecurityUserService, },\n{type: OidcSecurityCommon, },\n{type: AuthWellKnownEndpoints, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onModuleSetup': [{ type: Output },],\n'onAuthorizationResult': [{ type: Output },],\n};\n}\n\nfunction OidcSecurityService_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityService.ctorParameters;\n/** @type {?} */\nOidcSecurityService.propDecorators;\n/** @type {?} */\nOidcSecurityService.prototype.onModuleSetup;\n/** @type {?} */\nOidcSecurityService.prototype.onAuthorizationResult;\n/** @type {?} */\nOidcSecurityService.prototype.checkSessionChanged;\n/** @type {?} */\nOidcSecurityService.prototype.moduleSetup;\n/** @type {?} */\nOidcSecurityService.prototype._isAuthorized;\n/** @type {?} */\nOidcSecurityService.prototype._isAuthorizedValue;\n/** @type {?} */\nOidcSecurityService.prototype.lastUserData;\n/** @type {?} */\nOidcSecurityService.prototype._userData;\n/** @type {?} */\nOidcSecurityService.prototype.oidcSecurityValidation;\n/** @type {?} */\nOidcSecurityService.prototype.jwtKeys;\n/** @type {?} */\nOidcSecurityService.prototype.authWellKnownEndpointsLoaded;\n/** @type {?} */\nOidcSecurityService.prototype.runTokenValidationRunning;\n/** @type {?} */\nOidcSecurityService.prototype.platformId;\n/** @type {?} */\nOidcSecurityService.prototype.http;\n/** @type {?} */\nOidcSecurityService.prototype.authConfiguration;\n/** @type {?} */\nOidcSecurityService.prototype.router;\n/** @type {?} */\nOidcSecurityService.prototype.oidcSecurityCheckSession;\n/** @type {?} */\nOidcSecurityService.prototype.oidcSecuritySilentRenew;\n/** @type {?} */\nOidcSecurityService.prototype.oidcSecurityUserService;\n/** @type {?} */\nOidcSecurityService.prototype.oidcSecurityCommon;\n/** @type {?} */\nOidcSecurityService.prototype.authWellKnownEndpoints;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { OidcSecurityService } from '../services/oidc.security.service';\nimport { AuthConfiguration, DefaultConfiguration } from './auth.configuration';\nimport { OidcSecurityValidation } from '../services/oidc.security.validation';\nimport { OidcSecurityCheckSession } from '../services/oidc.security.check-session';\nimport { OidcSecuritySilentRenew } from '../services/oidc.security.silent-renew';\nimport { OidcSecurityUserService } from '../services/oidc.security.user-service';\nimport { OidcSecurityCommon } from '../services/oidc.security.common';\nimport { OidcSecurityStorage, BrowserStorage } from '../services/oidc.security.storage';\nimport { AuthWellKnownEndpoints } from '../services/auth.well-known-endpoints';\nexport class AuthModule {\n/**\n * @param {?=} token\n * @return {?}\n */\nstatic forRoot(token: Token = {}): ModuleWithProviders {\n        return {\n            ngModule: AuthModule,\n            providers: [\n                OidcSecurityService,\n                OidcSecurityValidation,\n                OidcSecurityCheckSession,\n                OidcSecuritySilentRenew,\n                OidcSecurityUserService,\n                OidcSecurityCommon,\n                AuthConfiguration,\n                DefaultConfiguration,\n                AuthWellKnownEndpoints,\n                {\n                    provide: OidcSecurityStorage,\n                    useClass: token.storage || BrowserStorage\n                }\n            ]\n        };\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AuthModule_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthModule.ctorParameters;\n}\n\n\nexport interface Type<T> extends Function {\n\n    new (...args: any[]): T;\n\n}\n\nexport interface Token {\n\n    storage?: Type<any>;\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nexport class DefaultConfiguration {\r\n    stsServer = 'https://localhost:44318';\r\n    redirect_url = 'https://localhost:44311';\r\n    // The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified by the iss (issuer) Claim as an audience.\r\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences not trusted by the Client.\r\n    client_id = 'angularclient';\r\n    response_type = 'id_token token';\r\n    // For some oidc, we require resource identifier to be provided along with the request.\r\n    resource = '';\r\n    scope = 'openid email profile';\r\n    // Only for Google Auth with particular G Suite domain, see https://developers.google.com/identity/protocols/OpenIDConnect#hd-param\r\n    hd_param = '';\r\n    post_logout_redirect_uri = 'https://localhost:44311/unauthorized';\r\n    start_checksession = false;\r\n    silent_renew = true;\r\n    silent_renew_offset_in_seconds = 0;\r\n    post_login_route = '/';\r\n    // HTTP 403\r\n    forbidden_route = '/forbidden';\r\n    // HTTP 401\r\n    unauthorized_route = '/unauthorized';\r\n    auto_userinfo = true;\r\n\tauto_clean_state_after_authentication: true;\r\n\ttrigger_authorization_result_event: false;\r\n    log_console_warning_active = true;\r\n    log_console_debug_active = false;\r\n\r\n\r\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n    max_id_token_iat_offset_allowed_in_seconds = 3;\r\n    override_well_known_configuration = false;\r\n    override_well_known_configuration_url = 'https://localhost:44386/wellknownconfiguration.json';\r\n\r\n    storage = typeof Storage !== 'undefined' ? sessionStorage : null;\r\n}\n\nfunction DefaultConfiguration_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultConfiguration.prototype.stsServer;\n/** @type {?} */\nDefaultConfiguration.prototype.redirect_url;\n/** @type {?} */\nDefaultConfiguration.prototype.client_id;\n/** @type {?} */\nDefaultConfiguration.prototype.response_type;\n/** @type {?} */\nDefaultConfiguration.prototype.resource;\n/** @type {?} */\nDefaultConfiguration.prototype.scope;\n/** @type {?} */\nDefaultConfiguration.prototype.hd_param;\n/** @type {?} */\nDefaultConfiguration.prototype.post_logout_redirect_uri;\n/** @type {?} */\nDefaultConfiguration.prototype.start_checksession;\n/** @type {?} */\nDefaultConfiguration.prototype.silent_renew;\n/** @type {?} */\nDefaultConfiguration.prototype.silent_renew_offset_in_seconds;\n/** @type {?} */\nDefaultConfiguration.prototype.post_login_route;\n/** @type {?} */\nDefaultConfiguration.prototype.forbidden_route;\n/** @type {?} */\nDefaultConfiguration.prototype.unauthorized_route;\n/** @type {?} */\nDefaultConfiguration.prototype.auto_userinfo;\n/** @type {?} */\nDefaultConfiguration.prototype.auto_clean_state_after_authentication;\n/** @type {?} */\nDefaultConfiguration.prototype.trigger_authorization_result_event;\n/** @type {?} */\nDefaultConfiguration.prototype.log_console_warning_active;\n/** @type {?} */\nDefaultConfiguration.prototype.log_console_debug_active;\n/** @type {?} */\nDefaultConfiguration.prototype.max_id_token_iat_offset_allowed_in_seconds;\n/** @type {?} */\nDefaultConfiguration.prototype.override_well_known_configuration;\n/** @type {?} */\nDefaultConfiguration.prototype.override_well_known_configuration_url;\n/** @type {?} */\nDefaultConfiguration.prototype.storage;\n}\n\nexport class OpenIDImplicitFlowConfiguration {\r\n\r\n    stsServer: string;\r\n    redirect_url: string;\r\n    client_id: string;\r\n    response_type: string;\r\n    resource: string;\r\n    scope: string;\r\n    hd_param: string;\r\n    post_logout_redirect_uri: string;\r\n    start_checksession: boolean;\r\n    silent_renew: boolean;\r\n    silent_renew_offset_in_seconds: number;\r\n    post_login_route: string;\r\n    forbidden_route: string;\r\n    unauthorized_route: string;\r\n    auto_userinfo: boolean;\r\n\tauto_clean_state_after_authentication: boolean;\r\n\ttrigger_authorization_result_event: boolean;\r\n    log_console_warning_active: boolean;\r\n    log_console_debug_active: boolean;\r\n    max_id_token_iat_offset_allowed_in_seconds: number;\r\n    override_well_known_configuration: boolean;\r\n    override_well_known_configuration_url: string;\r\n    storage: any;\r\n}\n\nfunction OpenIDImplicitFlowConfiguration_tsickle_Closure_declarations() {\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.stsServer;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.redirect_url;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.client_id;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.response_type;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.resource;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.scope;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.hd_param;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.post_logout_redirect_uri;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.start_checksession;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.silent_renew;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.silent_renew_offset_in_seconds;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.post_login_route;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.forbidden_route;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.unauthorized_route;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.auto_userinfo;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.auto_clean_state_after_authentication;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.trigger_authorization_result_event;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.log_console_warning_active;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.log_console_debug_active;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.max_id_token_iat_offset_allowed_in_seconds;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.override_well_known_configuration;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.override_well_known_configuration_url;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.storage;\n}\n\nexport class AuthConfiguration {\nprivate openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration;\n/**\n * @return {?}\n */\nget stsServer(): string {\r\n        return this.openIDImplicitFlowConfiguration.stsServer || this.defaultConfig.stsServer;\r\n    }\n/**\n * @return {?}\n */\nget redirect_url(): string {\r\n        return this.openIDImplicitFlowConfiguration.redirect_url || this.defaultConfig.redirect_url;\r\n    }\n/**\n * @return {?}\n */\nget client_id(): string {\r\n        return this.openIDImplicitFlowConfiguration.client_id || this.defaultConfig.client_id;\r\n    }\n/**\n * @return {?}\n */\nget response_type(): string {\r\n        return this.openIDImplicitFlowConfiguration.response_type || this.defaultConfig.response_type;\r\n    }\n/**\n * @return {?}\n */\nget resource(): string {\r\n        return this.openIDImplicitFlowConfiguration.resource || this.defaultConfig.resource;\r\n    }\n/**\n * @return {?}\n */\nget scope(): string {\r\n        return this.openIDImplicitFlowConfiguration.scope || this.defaultConfig.scope;\r\n    }\n/**\n * @return {?}\n */\nget hd_param(): string {\r\n      return this.openIDImplicitFlowConfiguration.hd_param || this.defaultConfig.hd_param;\r\n    }\n/**\n * @return {?}\n */\nget post_logout_redirect_uri(): string {\r\n        return this.openIDImplicitFlowConfiguration.post_logout_redirect_uri || this.defaultConfig.post_logout_redirect_uri;\r\n    }\n/**\n * @return {?}\n */\nget start_checksession(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.start_checksession !== undefined ? this.openIDImplicitFlowConfiguration.start_checksession : this.defaultConfig.start_checksession;\r\n    }\n/**\n * @return {?}\n */\nget silent_renew(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.silent_renew !== undefined ? this.openIDImplicitFlowConfiguration.silent_renew : this.defaultConfig.silent_renew;\r\n    }\n/**\n * @return {?}\n */\nget silent_renew_offset_in_seconds(): number {\r\n        return this.openIDImplicitFlowConfiguration.silent_renew_offset_in_seconds || this.defaultConfig.silent_renew_offset_in_seconds;\r\n    }\n/**\n * @return {?}\n */\nget post_login_route(): string {\r\n        return this.openIDImplicitFlowConfiguration.post_login_route || this.defaultConfig.post_login_route;\r\n    }\n/**\n * @return {?}\n */\nget forbidden_route(): string {\r\n        return this.openIDImplicitFlowConfiguration.forbidden_route || this.defaultConfig.forbidden_route;\r\n    }\n/**\n * @return {?}\n */\nget unauthorized_route(): string {\r\n        return this.openIDImplicitFlowConfiguration.unauthorized_route || this.defaultConfig.unauthorized_route;\r\n    }\n/**\n * @return {?}\n */\nget auto_userinfo(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.auto_userinfo !== undefined ? this.openIDImplicitFlowConfiguration.auto_userinfo : this.defaultConfig.auto_userinfo;\r\n    }\n/**\n * @return {?}\n */\nget auto_clean_state_after_authentication(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.auto_clean_state_after_authentication !== undefined ? this.openIDImplicitFlowConfiguration.auto_clean_state_after_authentication : this.defaultConfig.auto_clean_state_after_authentication;\r\n\t}\n/**\n * @return {?}\n */\nget trigger_authorization_result_event(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.trigger_authorization_result_event !== undefined ? this.openIDImplicitFlowConfiguration.trigger_authorization_result_event : this.defaultConfig.trigger_authorization_result_event;\r\n    }\n/**\n * @return {?}\n */\nget log_console_warning_active(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.log_console_warning_active !== undefined ? this.openIDImplicitFlowConfiguration.log_console_warning_active : this.defaultConfig.log_console_warning_active;\r\n    }\n/**\n * @return {?}\n */\nget log_console_debug_active(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.log_console_debug_active !== undefined ? this.openIDImplicitFlowConfiguration.log_console_debug_active : this.defaultConfig.log_console_debug_active;\r\n    }\n/**\n * @return {?}\n */\nget max_id_token_iat_offset_allowed_in_seconds(): number {\r\n        return this.openIDImplicitFlowConfiguration.max_id_token_iat_offset_allowed_in_seconds || this.defaultConfig.max_id_token_iat_offset_allowed_in_seconds;\r\n    }\n/**\n * @return {?}\n */\nget override_well_known_configuration(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.override_well_known_configuration !== undefined ? this.openIDImplicitFlowConfiguration.override_well_known_configuration : this.defaultConfig.override_well_known_configuration;\r\n    }\n/**\n * @return {?}\n */\nget override_well_known_configuration_url(): string {\r\n        return this.openIDImplicitFlowConfiguration.override_well_known_configuration_url || this.defaultConfig.override_well_known_configuration_url;\r\n    }\n/**\n * @return {?}\n */\nget storage(): any {\r\n        return this.openIDImplicitFlowConfiguration.storage || this.defaultConfig.storage;\r\n    }\n/**\n * @param {?} defaultConfig\n */\nconstructor(private defaultConfig: DefaultConfiguration) { }\n/**\n * @param {?} openIDImplicitFlowConfiguration\n * @return {?}\n */\ninit(openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration) {\r\n        this.openIDImplicitFlowConfiguration = openIDImplicitFlowConfiguration;\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DefaultConfiguration, },\n];\n}\n\nfunction AuthConfiguration_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthConfiguration.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthConfiguration.ctorParameters;\n/** @type {?} */\nAuthConfiguration.prototype.openIDImplicitFlowConfiguration;\n/** @type {?} */\nAuthConfiguration.prototype.defaultConfig;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { AuthConfiguration } from '../modules/auth.configuration';\n/**\n * Implement this class-interface to create a custom storage.\n * @abstract\n */\nexport abstract class OidcSecurityStorage {\n/**\n * This method must contain the logic to read the storage.\n * @abstract\n * @param {?} key\n * @return {?} The value of the given key\n */\nread(key: string) {}\n/**\n * This method must contain the logic to write the storage.\n * @abstract\n * @param {?} key\n * @param {?} value The value for the given key\n * @return {?}\n */\nwrite(key: string, value: any) {}\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OidcSecurityStorage_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityStorage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityStorage.ctorParameters;\n}\n\nexport class BrowserStorage implements OidcSecurityStorage {\nprivate hasStorage: boolean;\n/**\n * @param {?} authConfiguration\n */\nconstructor(private authConfiguration: AuthConfiguration) {\n        this.hasStorage = typeof Storage !== 'undefined';\n    }\n/**\n * @param {?} key\n * @return {?}\n */\npublic read(key: string): any {\n        if (this.hasStorage) {\n            return JSON.parse(this.authConfiguration.storage.getItem(key));\n        }\n\n        return;\n    }\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\npublic write(key: string, value: any): void {\n        if (this.hasStorage) {\n            value = value === undefined ? null : value;\n            this.authConfiguration.storage.setItem(key, JSON.stringify(value));\n        }\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthConfiguration, },\n];\n}\n\nfunction BrowserStorage_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserStorage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserStorage.ctorParameters;\n/** @type {?} */\nBrowserStorage.prototype.hasStorage;\n/** @type {?} */\nBrowserStorage.prototype.authConfiguration;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { AuthConfiguration } from '../modules/auth.configuration';\r\nimport { OidcSecurityStorage } from './oidc.security.storage';\r\n\r\nexport type SilentRenewState = 'running' | '';\nexport class OidcSecurityCommon {\nprivate storage_auth_result = 'authorizationResult';\n/**\n * @return {?}\n */\npublic get authResult(): any {\r\n        return this.retrieve(this.storage_auth_result);\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set authResult(value: any) {\r\n        this.store(this.storage_auth_result, value);\r\n    }\nprivate storage_access_token = 'authorizationData';\n/**\n * @return {?}\n */\npublic get accessToken(): string {\r\n        return this.retrieve(this.storage_access_token) || '';\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set accessToken(value: string) {\r\n        this.store(this.storage_access_token, value);\r\n    }\nprivate storage_id_token = 'authorizationDataIdToken';\n/**\n * @return {?}\n */\npublic get idToken(): string {\r\n        return this.retrieve(this.storage_id_token) || '';\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set idToken(value: string) {\r\n        this.store(this.storage_id_token, value);\r\n    }\nprivate storage_is_authorized = '_isAuthorized';\n/**\n * @return {?}\n */\npublic get isAuthorized(): boolean | undefined {\r\n        return this.retrieve(this.storage_is_authorized);\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set isAuthorized(value: boolean | undefined) {\r\n        this.store(this.storage_is_authorized, value);\r\n    }\nprivate storage_user_data = 'userData';\n/**\n * @return {?}\n */\npublic get userData(): any {\r\n        return this.retrieve(this.storage_user_data);\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set userData(value: any) {\r\n        this.store(this.storage_user_data, value);\r\n    }\nprivate storage_auth_nonce = 'authNonce';\n/**\n * @return {?}\n */\npublic get authNonce(): string {\r\n        return this.retrieve(this.storage_auth_nonce) || '';\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set authNonce(value: string) {\r\n        this.store(this.storage_auth_nonce, value);\r\n    }\nprivate storage_auth_state_control = 'authStateControl';\n/**\n * @return {?}\n */\npublic get authStateControl(): string {\r\n        return this.retrieve(this.storage_auth_state_control) || '';\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set authStateControl(value: string) {\r\n        this.store(this.storage_auth_state_control, value);\r\n    }\nprivate storage_well_known_endpoints = 'wellknownendpoints';\n/**\n * @return {?}\n */\npublic get wellKnownEndpoints(): any {\r\n        return this.retrieve(this.storage_well_known_endpoints);\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set wellKnownEndpoints(value: any) {\r\n        this.store(this.storage_well_known_endpoints, value);\r\n    }\nprivate storage_session_state = 'session_state';\n/**\n * @return {?}\n */\npublic get sessionState(): any {\r\n        return this.retrieve(this.storage_session_state);\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set sessionState(value: any) {\r\n        this.store(this.storage_session_state, value);\r\n    }\nprivate storage_silent_renew_running = 'storage_silent_renew_running';\n/**\n * @return {?}\n */\npublic get silentRenewRunning(): SilentRenewState {\r\n        return this.retrieve(this.storage_silent_renew_running) || '';\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set silentRenewRunning(value: SilentRenewState) {\r\n        this.store(this.storage_silent_renew_running, value);\r\n    }\nprivate storage_custom_request_params = 'storage_custom_request_params';\n/**\n * @return {?}\n */\npublic get customRequestParams(): { [key: string]: string | number | boolean } {\r\n        return this.retrieve(this.storage_custom_request_params);\r\n    }\n/**\n * @param {?} value\n * @return {?}\n */\npublic set customRequestParams(value: { [key: string]: string | number | boolean }) {\r\n        this.store(this.storage_custom_request_params, value);\r\n    }\n/**\n * @param {?} authConfiguration\n * @param {?} oidcSecurityStorage\n */\nconstructor(private authConfiguration: AuthConfiguration,\nprivate oidcSecurityStorage: OidcSecurityStorage) {\r\n    }\n/**\n * @return {?}\n */\nsetupModule() { }\n/**\n * @param {?} key\n * @return {?}\n */\nprivate retrieve(key: string): any {\r\n        return this.oidcSecurityStorage.read(key);\r\n    }\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nprivate store(key: string, value: any) {\r\n        this.oidcSecurityStorage.write(key, value);\r\n    }\n/**\n * @param {?} isRenewProcess\n * @return {?}\n */\nresetStorageData(isRenewProcess: boolean) {\r\n        if (!isRenewProcess) {\r\n            this.store(this.storage_auth_result, '');\r\n            this.store(this.storage_session_state, '');\r\n            this.store(this.storage_silent_renew_running, '');\r\n            this.store(this.storage_is_authorized, false);\r\n            this.store(this.storage_access_token, '');\r\n            this.store(this.storage_id_token, '');\r\n            this.store(this.storage_user_data, '');\r\n        }\r\n    }\n/**\n * @return {?}\n */\ngetAccessToken(): any {\r\n        return this.retrieve(this.storage_access_token);\r\n    }\n/**\n * @return {?}\n */\ngetIdToken(): any {\r\n        return this.retrieve(this.storage_id_token);\r\n    }\n/**\n * @param {?} message\n * @return {?}\n */\nlogError(message: any) {\r\n        console.error(message);\r\n    }\n/**\n * @param {?} message\n * @return {?}\n */\nlogWarning(message: any) {\r\n        if (this.authConfiguration.log_console_warning_active) {\r\n            console.warn(message);\r\n        }\r\n    }\n/**\n * @param {?} message\n * @return {?}\n */\nlogDebug(message: any) {\r\n        if (this.authConfiguration.log_console_debug_active) {\r\n            console.log(message);\r\n        }\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthConfiguration, },\n{type: OidcSecurityStorage, },\n];\n}\n\nfunction OidcSecurityCommon_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityCommon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityCommon.ctorParameters;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_auth_result;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_access_token;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_id_token;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_is_authorized;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_user_data;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_auth_nonce;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_auth_state_control;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_well_known_endpoints;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_session_state;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_silent_renew_running;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_custom_request_params;\n/** @type {?} */\nOidcSecurityCommon.prototype.authConfiguration;\n/** @type {?} */\nOidcSecurityCommon.prototype.oidcSecurityStorage;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\n\r\nimport { KJUR, KEYUTIL, hextob64u } from 'jsrsasign';\nexport class OidcSecurityValidation {\n/**\n * @param {?} oidcSecurityCommon\n */\nconstructor(private oidcSecurityCommon: OidcSecurityCommon) {\r\n    }\n/**\n * @param {?} token\n * @param {?=} offsetSeconds\n * @return {?}\n */\nisTokenExpired(token: string, offsetSeconds?: number): boolean {\r\n\r\n        let /** @type {?} */ decoded: any;\r\n        decoded = this.getPayloadFromToken(token, false);\r\n\r\n        return !(this.validate_id_token_exp_not_expired(decoded, offsetSeconds));\r\n    }\n/**\n * @param {?} decoded_id_token\n * @param {?=} offsetSeconds\n * @return {?}\n */\nvalidate_id_token_exp_not_expired(decoded_id_token: string, offsetSeconds?: number): boolean {\r\n        let /** @type {?} */ tokenExpirationDate = this.getTokenExpirationDate(decoded_id_token);\r\n        offsetSeconds = offsetSeconds || 0;\r\n\r\n        if (tokenExpirationDate == null) {\r\n            return false;\r\n        }\r\n\r\n        // Token not expired?\r\n        return (tokenExpirationDate.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));\r\n    }\n/**\n * @param {?} dataIdToken\n * @return {?}\n */\nvalidate_required_id_token(dataIdToken: any): boolean {\r\n\r\n        let /** @type {?} */ validated = true;\r\n        if (!dataIdToken.hasOwnProperty('iss')) {\r\n            validated = false;\r\n            this.oidcSecurityCommon.logWarning('iss is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('sub')) {\r\n            validated = false;\r\n            this.oidcSecurityCommon.logWarning('sub is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('aud')) {\r\n            validated = false;\r\n            this.oidcSecurityCommon.logWarning('aud is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('exp')) {\r\n            validated = false;\r\n            this.oidcSecurityCommon.logWarning('exp is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            validated = false;\r\n            this.oidcSecurityCommon.logWarning('iat is missing, this is required in the id_token');\r\n        }\r\n\r\n        return validated;\r\n    }\n/**\n * @param {?} dataIdToken\n * @param {?} max_offset_allowed_in_seconds\n * @return {?}\n */\nvalidate_id_token_iat_max_offset(dataIdToken: any, max_offset_allowed_in_seconds: number): boolean {\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            return false;\r\n        }\r\n\r\n        let /** @type {?} */ dateTime_iat_id_token = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n        dateTime_iat_id_token.setUTCSeconds(dataIdToken.iat);\r\n\r\n        max_offset_allowed_in_seconds = max_offset_allowed_in_seconds || 0;\r\n\r\n        if (dateTime_iat_id_token == null) {\r\n            return false;\r\n        }\r\n\r\n        this.oidcSecurityCommon.logDebug('validate_id_token_iat_max_offset: ' + (new Date().valueOf() - dateTime_iat_id_token.valueOf()) + ' < ' + (max_offset_allowed_in_seconds * 1000));\r\n        return ((new Date().valueOf() - dateTime_iat_id_token.valueOf()) < (max_offset_allowed_in_seconds * 1000));\r\n    }\n/**\n * @param {?} dataIdToken\n * @param {?} local_nonce\n * @return {?}\n */\nvalidate_id_token_nonce(dataIdToken: any, local_nonce: any): boolean {\r\n        if (dataIdToken.nonce !== local_nonce) {\r\n            this.oidcSecurityCommon.logDebug('Validate_id_token_nonce failed, dataIdToken.nonce: ' + dataIdToken.nonce + ' local_nonce:' + local_nonce);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} dataIdToken\n * @param {?} authWellKnownEndpoints_issuer\n * @return {?}\n */\nvalidate_id_token_iss(dataIdToken: any, authWellKnownEndpoints_issuer: any): boolean {\r\n        if (dataIdToken.iss != authWellKnownEndpoints_issuer) {\r\n            this.oidcSecurityCommon.logDebug('Validate_id_token_iss failed, dataIdToken.iss: ' + dataIdToken.iss + ' authWellKnownEndpoints issuer:' + authWellKnownEndpoints_issuer);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} dataIdToken\n * @param {?} aud\n * @return {?}\n */\nvalidate_id_token_aud(dataIdToken: any, aud: any): boolean {\r\n        if (dataIdToken.aud != aud) {\r\n            this.oidcSecurityCommon.logDebug('Validate_id_token_aud failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} state\n * @param {?} local_state\n * @return {?}\n */\nvalidateStateFromHashCallback(state: any, local_state: any): boolean {\r\n        if (state != local_state) {\r\n            this.oidcSecurityCommon.logDebug('ValidateStateFromHashCallback failed, state: ' + state + ' local_state:' + local_state);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} id_token_sub\n * @param {?} userdata_sub\n * @return {?}\n */\nvalidate_userdata_sub_id_token(id_token_sub: any, userdata_sub: any): boolean {\r\n        if (id_token_sub != userdata_sub) {\r\n            this.oidcSecurityCommon.logDebug('validate_userdata_sub_id_token failed, id_token_sub: ' + id_token_sub + ' userdata_sub:' + userdata_sub);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} token\n * @param {?} encode\n * @return {?}\n */\ngetPayloadFromToken(token: any, encode: boolean) {\r\n        let /** @type {?} */ data = {};\r\n        if (typeof token !== 'undefined') {\r\n            let /** @type {?} */ encoded = token.split('.')[1];\r\n            if (encode) {\r\n                return encoded;\r\n            }\r\n            data = JSON.parse(this.urlBase64Decode(encoded));\r\n        }\r\n\r\n        return data;\r\n    }\n/**\n * @param {?} token\n * @param {?} encode\n * @return {?}\n */\ngetHeaderFromToken(token: any, encode: boolean) {\r\n        let /** @type {?} */ data = {};\r\n        if (typeof token !== 'undefined') {\r\n            let /** @type {?} */ encoded = token.split('.')[0];\r\n            if (encode) {\r\n                return encoded;\r\n            }\r\n            data = JSON.parse(this.urlBase64Decode(encoded));\r\n        }\r\n\r\n        return data;\r\n    }\n/**\n * @param {?} token\n * @param {?} encode\n * @return {?}\n */\ngetSignatureFromToken(token: any, encode: boolean) {\r\n        let /** @type {?} */ data = {};\r\n        if (typeof token !== 'undefined') {\r\n            let /** @type {?} */ encoded = token.split('.')[2];\r\n            if (encode) {\r\n                return encoded;\r\n            }\r\n            data = JSON.parse(this.urlBase64Decode(encoded));\r\n        }\r\n\r\n        return data;\r\n    }\n/**\n * @param {?} id_token\n * @param {?} jwtkeys\n * @return {?}\n */\nvalidate_signature_id_token(id_token: any, jwtkeys: any): boolean {\r\n\r\n        if (!jwtkeys || !jwtkeys.keys) {\r\n            return false;\r\n        }\r\n\r\n        let /** @type {?} */ header_data = this.getHeaderFromToken(id_token, false);\r\n\r\n\t\tif ((Object.keys(header_data).length === 0 && header_data.constructor === Object)) {\r\n\t\t\tthis.oidcSecurityCommon.logWarning('id token has no header data');\r\n            return false;\r\n\t\t}\r\n\r\n        let /** @type {?} */ kid = header_data.kid;\r\n        let /** @type {?} */ alg = header_data.alg;\r\n\r\n        if ('RS256' != alg) {\r\n            this.oidcSecurityCommon.logWarning('Only RS256 supported');\r\n            return false;\r\n        }\r\n\r\n        let /** @type {?} */ isValid = false;\r\n\r\n        if (!header_data.hasOwnProperty('kid')) {\r\n            // exactly 1 key in the jwtkeys and no kid in the Jose header\r\n            // kty\t\"RSA\" use \"sig\"\r\n            let /** @type {?} */ amountOfMatchingKeys = 0;\r\n            for (let /** @type {?} */ key of jwtkeys.keys) {\r\n                if (key.kty == 'RSA' && key.use == 'sig') {\r\n                    amountOfMatchingKeys = amountOfMatchingKeys + 1;\r\n                }\r\n            }\r\n\r\n            if (amountOfMatchingKeys == 0) {\r\n                this.oidcSecurityCommon.logWarning('no keys found, incorrect Signature, validation failed for id_token');\r\n                return false;\r\n            } else if (amountOfMatchingKeys > 1 ) {\r\n                this.oidcSecurityCommon.logWarning('no ID Token kid claim in JOSE header and multiple supplied in jwks_uri');\r\n                return false;\r\n            } else {\r\n                for (let /** @type {?} */ key of jwtkeys.keys) {\r\n                    if (key.kty == 'RSA' && key.use == 'sig') {\r\n                        let /** @type {?} */ publickey = KEYUTIL.getKey(key);\r\n                        isValid = KJUR.jws.JWS.verify(id_token, publickey, ['RS256']);\r\n                        if (!isValid) {\r\n                            this.oidcSecurityCommon.logWarning('incorrect Signature, validation failed for id_token');\r\n                        }\r\n                        return isValid;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // kid in the Jose header of id_token\r\n            for (let /** @type {?} */ key of jwtkeys.keys) {\r\n                if (key.kid == kid) {\r\n                    let /** @type {?} */ publickey = KEYUTIL.getKey(key);\r\n                    isValid = KJUR.jws.JWS.verify(id_token, publickey, ['RS256']);\r\n                    if (!isValid) {\r\n                        this.oidcSecurityCommon.logWarning('incorrect Signature, validation failed for id_token');\r\n                    }\r\n                    return isValid;\r\n                }\r\n            }\r\n        }\r\n\r\n        return isValid;\r\n    }\n/**\n * @param {?} response_type\n * @return {?}\n */\nconfig_validate_response_type(response_type: string): boolean {\r\n        if (response_type === 'id_token token' || response_type === 'id_token') {\r\n            return true;\r\n        }\r\n\r\n        this.oidcSecurityCommon.logWarning('module configure incorrect, invalid response_type:' + response_type);\r\n        return false;\r\n    }\n/**\n * @param {?} access_token\n * @param {?} at_hash\n * @return {?}\n */\nvalidate_id_token_at_hash(access_token: any, at_hash: any): boolean {\r\n        this.oidcSecurityCommon.logDebug('From the server:' + at_hash);\r\n        let /** @type {?} */ testdata =  this.generate_at_hash('' + access_token);\r\n        this.oidcSecurityCommon.logDebug('client validation not decoded:' + testdata);\r\n        if (testdata == at_hash) {\r\n            return true; // isValid;\r\n        } else {\r\n            let /** @type {?} */ testValue = this.generate_at_hash('' + decodeURIComponent(access_token));\r\n            this.oidcSecurityCommon.logDebug('-gen access--' + testValue);\r\n           if (testValue == at_hash) {\r\n                return true; // isValid\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\n/**\n * @param {?} access_token\n * @return {?}\n */\nprivate generate_at_hash(access_token: any): string {\r\n      let /** @type {?} */ hash = KJUR.crypto.Util.hashString(access_token, 'sha256');\r\n        let /** @type {?} */ first128bits = hash.substr(0, hash.length / 2);\r\n        let /** @type {?} */ testdata = hextob64u(first128bits);\r\n\r\n      return testdata;\r\n    }\n/**\n * @param {?} dataIdToken\n * @return {?}\n */\nprivate getTokenExpirationDate(dataIdToken: any): Date {\r\n        if (!dataIdToken.hasOwnProperty('exp')) {\r\n            return new Date();\r\n        }\r\n\r\n        let /** @type {?} */ date = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n        date.setUTCSeconds(dataIdToken.exp);\r\n\r\n        return date;\r\n    }\n/**\n * @param {?} str\n * @return {?}\n */\nprivate urlBase64Decode(str: string) {\r\n        let /** @type {?} */ output = str.replace('-', '+').replace('_', '/');\r\n        switch (output.length % 4) {\r\n            case 0:\r\n                break;\r\n            case 2:\r\n                output += '==';\r\n                break;\r\n            case 3:\r\n                output += '=';\r\n                break;\r\n            default:\r\n                throw 'Illegal base64url string!';\r\n        }\r\n\r\n        return window.atob(output);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OidcSecurityCommon, },\n];\n}\n\nfunction OidcSecurityValidation_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityValidation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityValidation.ctorParameters;\n/** @type {?} */\nOidcSecurityValidation.prototype.oidcSecurityCommon;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, EventEmitter, Output } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport'rxjs/add/operator/map';\r\nimport'rxjs/add/operator/catch';\r\nimport'rxjs/add/observable/throw';\r\nimport { AuthConfiguration } from '../modules/auth.configuration';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\nexport class AuthWellKnownEndpoints {\r\n\r\n     onWellKnownEndpointsLoaded: EventEmitter<any> = new EventEmitter<any>(true);\r\n\r\n    issuer: string;\r\n    jwks_uri: string;\r\n    authorization_endpoint: string;\r\n    token_endpoint: string;\r\n    userinfo_endpoint: string;\r\n    end_session_endpoint: string;\r\n    check_session_iframe: string;\r\n    revocation_endpoint: string;\r\n    introspection_endpoint: string;\n/**\n * @param {?} http\n * @param {?} authConfiguration\n * @param {?} oidcSecurityCommon\n */\nconstructor(\nprivate http: HttpClient,\nprivate authConfiguration: AuthConfiguration,\nprivate oidcSecurityCommon: OidcSecurityCommon\r\n    ) {\r\n    }\n/**\n * @return {?}\n */\nsetupModule() {\r\n        let /** @type {?} */ data = this.oidcSecurityCommon.wellKnownEndpoints;\r\n        this.oidcSecurityCommon.logDebug(data);\r\n        if (data && data !== '') {\r\n            this.oidcSecurityCommon.logDebug('AuthWellKnownEndpoints already defined');\r\n            this.issuer = data.issuer;\r\n            this.jwks_uri = data.jwks_uri;\r\n            this.authorization_endpoint = data.authorization_endpoint;\r\n            this.token_endpoint = data.token_endpoint;\r\n            this.userinfo_endpoint = data.userinfo_endpoint;\r\n\r\n            if (data.end_session_endpoint) {\r\n                this.end_session_endpoint = data.end_session_endpoint;\r\n\r\n            };\r\n\r\n            if (data.check_session_iframe) {\r\n                this.check_session_iframe = data.check_session_iframe;\r\n            };\r\n\r\n            if (data.revocation_endpoint) {\r\n                this.revocation_endpoint = data.revocation_endpoint;\r\n            };\r\n\r\n            if (data.introspection_endpoint) {\r\n                this.introspection_endpoint = data.introspection_endpoint;\r\n            }\r\n\r\n            this.onWellKnownEndpointsLoaded.emit();\r\n        } else {\r\n            this.oidcSecurityCommon.logDebug('AuthWellKnownEndpoints first time, get from the server');\r\n            this.getWellKnownEndpoints()\r\n                .subscribe((data: any) => {\r\n                    this.issuer = data.issuer;\r\n                    this.jwks_uri = data.jwks_uri;\r\n                    this.authorization_endpoint = data.authorization_endpoint;\r\n                    this.token_endpoint = data.token_endpoint;\r\n                    this.userinfo_endpoint = data.userinfo_endpoint;\r\n\r\n                    if (data.end_session_endpoint) {\r\n                        this.end_session_endpoint = data.end_session_endpoint;\r\n                    };\r\n\r\n                    if (data.check_session_iframe) {\r\n                        this.check_session_iframe = data.check_session_iframe;\r\n                    };\r\n\r\n                    if (data.revocation_endpoint) {\r\n                        this.revocation_endpoint = data.revocation_endpoint;\r\n                    };\r\n\r\n                    if (data.introspection_endpoint) {\r\n                        this.introspection_endpoint = data.introspection_endpoint;\r\n                    }\r\n\r\n                    this.oidcSecurityCommon.wellKnownEndpoints = data;\r\n                    this.oidcSecurityCommon.logDebug(data);\r\n\r\n                    this.onWellKnownEndpointsLoaded.emit();\r\n                });\r\n        }\r\n    }\nprivate getWellKnownEndpoints = (): Observable<any> => {\r\n\r\n        let /** @type {?} */ headers = new HttpHeaders();\r\n        headers = headers.set('Accept', 'application/json');\r\n\r\n        let /** @type {?} */ url = this.authConfiguration.stsServer + '/.well-known/openid-configuration';\r\n        if (this.authConfiguration.override_well_known_configuration) {\r\n            url = this.authConfiguration.override_well_known_configuration_url;\r\n        }\r\n\r\n        return this.http.get(url, {\r\n            headers: headers,\r\n        });\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpClient, },\n{type: AuthConfiguration, },\n{type: OidcSecurityCommon, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onWellKnownEndpointsLoaded': [{ type: Output },],\n};\n}\n\nfunction AuthWellKnownEndpoints_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthWellKnownEndpoints.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthWellKnownEndpoints.ctorParameters;\n/** @type {?} */\nAuthWellKnownEndpoints.propDecorators;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.onWellKnownEndpointsLoaded;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.issuer;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.jwks_uri;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.authorization_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.token_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.userinfo_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.end_session_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.check_session_iframe;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.revocation_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.introspection_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.getWellKnownEndpoints;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.http;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.authConfiguration;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.oidcSecurityCommon;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, EventEmitter, Output } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport'rxjs/add/operator/map';\r\nimport'rxjs/add/operator/catch';\r\nimport'rxjs/add/operator/timeInterval';\r\nimport'rxjs/add/operator/pluck';\r\nimport'rxjs/add/operator/take';\r\nimport'rxjs/add/observable/throw';\r\nimport'rxjs/add/observable/interval';\r\nimport'rxjs/add/observable/timer';\r\nimport'rxjs/add/observable/empty';\r\nimport { AuthConfiguration } from '../modules/auth.configuration';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { AuthWellKnownEndpoints } from './auth.well-known-endpoints';\nexport class OidcSecurityCheckSession {\nprivate sessionIframe: any;\nprivate iframeMessageEvent: any;\r\n\r\n     onCheckSessionChanged: EventEmitter<any> = new EventEmitter<any>(true);\n/**\n * @param {?} authConfiguration\n * @param {?} oidcSecurityCommon\n * @param {?} authWellKnownEndpoints\n */\nconstructor(\nprivate authConfiguration: AuthConfiguration,\nprivate oidcSecurityCommon: OidcSecurityCommon,\nprivate authWellKnownEndpoints: AuthWellKnownEndpoints\r\n    ) {\r\n    }\n/**\n * @return {?}\n */\ninit() {\r\n        let /** @type {?} */ exists = window.parent.document.getElementById('myiFrameForCheckSession');\r\n        if (!exists) {\r\n            this.sessionIframe = window.document.createElement('iframe');\r\n\r\n            this.sessionIframe.id = 'myiFrameForCheckSession';\r\n            this.oidcSecurityCommon.logDebug(this.sessionIframe);\r\n            this.sessionIframe.style.display = 'none';\r\n            this.sessionIframe.src = this.authWellKnownEndpoints.check_session_iframe;\r\n\r\n            window.document.body.appendChild(this.sessionIframe);\r\n            this.iframeMessageEvent = this.messageHandler.bind(this);\r\n            window.addEventListener('message', this.iframeMessageEvent, false);\r\n\r\n            return Observable.create((observer: Observer<any>) => {\r\n                this.sessionIframe.onload = () => {\r\n                    observer.next(this);\r\n                    observer.complete();\r\n                }\r\n            });\r\n        }\r\n\r\n        return Observable.empty<Response>();\r\n    }\n/**\n * @param {?} clientId\n * @return {?}\n */\npollServerSession(clientId: any) {\r\n        let /** @type {?} */ source = Observable.timer(3000, 3000)\r\n            .timeInterval()\r\n            .pluck('interval')\r\n            .take(10000);\r\n\r\n        source.subscribe(() => {\r\n                this.oidcSecurityCommon.logDebug(this.sessionIframe);\r\n                let /** @type {?} */ session_state = this.oidcSecurityCommon.sessionState;\r\n                if (session_state && session_state !== '') {\r\n                    this.sessionIframe.contentWindow.postMessage(clientId + ' ' + session_state, this.authConfiguration.stsServer);\r\n                }\r\n            },\r\n            (err: any) => {\r\n                this.oidcSecurityCommon.logError('pollServerSession error: ' + err);\r\n            },\r\n            () => {\r\n                this.oidcSecurityCommon.logDebug('checksession pollServerSession completed');\r\n            });\r\n    }\n/**\n * @param {?} e\n * @return {?}\n */\nprivate messageHandler(e: any) {\r\n        if (e.origin === this.authConfiguration.stsServer &&\r\n            e.source === this.sessionIframe.contentWindow\r\n        ) {\r\n            if (e.data === 'error') {\r\n                this.oidcSecurityCommon.logWarning('error from checksession messageHandler');\r\n            } else if (e.data === 'changed') {\r\n                this.onCheckSessionChanged.emit();\r\n            } else {\r\n                this.oidcSecurityCommon.logDebug(e.data + ' from checksession messageHandler');\r\n            }\r\n        }\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthConfiguration, },\n{type: OidcSecurityCommon, },\n{type: AuthWellKnownEndpoints, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onCheckSessionChanged': [{ type: Output },],\n};\n}\n\nfunction OidcSecurityCheckSession_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityCheckSession.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityCheckSession.ctorParameters;\n/** @type {?} */\nOidcSecurityCheckSession.propDecorators;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.sessionIframe;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.iframeMessageEvent;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.onCheckSessionChanged;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.authConfiguration;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.oidcSecurityCommon;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.authWellKnownEndpoints;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { Observable } from 'rxjs/Observable';\nexport class OidcSecuritySilentRenew {\nprivate sessionIframe: any;\n/**\n * @param {?} oidcSecurityCommon\n */\nconstructor(private oidcSecurityCommon: OidcSecurityCommon) {\r\n    }\n/**\n * @return {?}\n */\ninitRenew() {\r\n        let /** @type {?} */ existsparent = undefined;\r\n        try {\r\n          let /** @type {?} */ parentdoc = window.parent.document;\r\n          if (!parentdoc) {\r\n              throw new Error('Unaccessible');\r\n          }\r\n\r\n          existsparent =  parentdoc.getElementById('myiFrameForSilentRenew');\r\n        } catch ( /** @type {?} */e) {\r\n            // not accessible\r\n        }\r\n        let /** @type {?} */ exists = window.document.getElementById('myiFrameForSilentRenew');\r\n        if (existsparent) {\r\n            this.sessionIframe = existsparent;\r\n        } else if (exists) {\r\n            this.sessionIframe = exists;\r\n        }\r\n\r\n        if (!exists && !existsparent) {\r\n            this.sessionIframe = window.document.createElement('iframe');\r\n            this.sessionIframe.id = 'myiFrameForSilentRenew';\r\n            this.oidcSecurityCommon.logDebug(this.sessionIframe);\r\n            this.sessionIframe.style.display = 'none';\r\n\r\n            window.document.body.appendChild(this.sessionIframe);\r\n        }\r\n    }\n/**\n * @param {?} url\n * @return {?}\n */\nstartRenew(url: string) {\r\n        let /** @type {?} */ existsparent = undefined;\r\n        try {\r\n          let /** @type {?} */ parentdoc = window.parent.document;\r\n          if (!parentdoc) {\r\n              throw new Error('Unaccessible');\r\n          }\r\n\r\n          existsparent =  parentdoc.getElementById('myiFrameForSilentRenew');\r\n        } catch ( /** @type {?} */e) {\r\n            // not accessible\r\n        }\r\n        let /** @type {?} */ exists = window.document.getElementById('myiFrameForSilentRenew');\r\n        if (existsparent) {\r\n            this.sessionIframe = existsparent;\r\n        } else if (exists) {\r\n            this.sessionIframe = exists;\r\n        }\r\n\r\n        this.oidcSecurityCommon.logDebug('startRenew for URL:' + url);\r\n        this.sessionIframe.src = url;\r\n\r\n        return Observable.create((observer: Observer<any>) => {\r\n            this.sessionIframe.onload = () => {\r\n                observer.next(this);\r\n                observer.complete();\r\n            }\r\n        });\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OidcSecurityCommon, },\n];\n}\n\nfunction OidcSecuritySilentRenew_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecuritySilentRenew.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecuritySilentRenew.ctorParameters;\n/** @type {?} */\nOidcSecuritySilentRenew.prototype.sessionIframe;\n/** @type {?} */\nOidcSecuritySilentRenew.prototype.oidcSecurityCommon;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport'rxjs/add/operator/map';\r\nimport'rxjs/add/operator/catch';\r\nimport'rxjs/add/observable/throw';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { AuthWellKnownEndpoints } from './auth.well-known-endpoints';\nexport class OidcSecurityUserService {\r\n\r\n    userData: any = '';\n/**\n * @param {?} http\n * @param {?} oidcSecurityCommon\n * @param {?} authWellKnownEndpoints\n */\nconstructor(\nprivate http: HttpClient,\nprivate oidcSecurityCommon: OidcSecurityCommon,\nprivate authWellKnownEndpoints: AuthWellKnownEndpoints\r\n    ) {\r\n    }\n/**\n * @return {?}\n */\ninitUserData() {\r\n        return this.getIdentityUserData()\r\n            .map(data => this.userData = data);\r\n    }\nprivate getIdentityUserData = (): Observable<any> => {\r\n\r\n        let /** @type {?} */ headers = new HttpHeaders();\r\n        headers = headers.set('Accept', 'application/json');\r\n\r\n        let /** @type {?} */ token = this.oidcSecurityCommon.getAccessToken();\r\n\r\n        if (token !== '') {\r\n            headers = headers.set('Authorization', 'Bearer ' + decodeURIComponent(token));\r\n        }\r\n\r\n        return this.http.get(this.authWellKnownEndpoints.userinfo_endpoint, {\r\n            headers: headers,\r\n        });\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpClient, },\n{type: OidcSecurityCommon, },\n{type: AuthWellKnownEndpoints, },\n];\n}\n\nfunction OidcSecurityUserService_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityUserService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityUserService.ctorParameters;\n/** @type {?} */\nOidcSecurityUserService.prototype.userData;\n/** @type {?} */\nOidcSecurityUserService.prototype.getIdentityUserData;\n/** @type {?} */\nOidcSecurityUserService.prototype.http;\n/** @type {?} */\nOidcSecurityUserService.prototype.oidcSecurityCommon;\n/** @type {?} */\nOidcSecurityUserService.prototype.authWellKnownEndpoints;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport type AuthorizationResult = number;\nexport let AuthorizationResult: any = {};\nAuthorizationResult.authorized = 1;\nAuthorizationResult.forbidden = 2;\nAuthorizationResult.unauthorized = 3;\nAuthorizationResult[AuthorizationResult.authorized] = \"authorized\";\nAuthorizationResult[AuthorizationResult.forbidden] = \"forbidden\";\nAuthorizationResult[AuthorizationResult.unauthorized] = \"unauthorized\";\n","import { HttpParameterCodec } from '@angular/common/http';\nexport class UriEncoder implements HttpParameterCodec {\n/**\n * @param {?} key\n * @return {?}\n */\nencodeKey(key: string): string {\n        return encodeURIComponent(key);\n    }\n/**\n * @param {?} value\n * @return {?}\n */\nencodeValue(value: string): string {\n        return encodeURIComponent(value);\n    }\n/**\n * @param {?} key\n * @return {?}\n */\ndecodeKey(key: string): string {\n        return decodeURIComponent(key);\n    }\n/**\n * @param {?} value\n * @return {?}\n */\ndecodeValue(value: string): string {\n        return decodeURIComponent(value);\n    }\n\n}\n"],"names":["this","runTokenValidation","oidcSecurityCommon","logDebug","authConfiguration","stsServer","isPlatformBrowser","platformId","authWellKnownEndpoints","onWellKnownEndpointsLoaded","subscribe","_this","moduleSetup","onModuleSetup","emit","silent_renew","oidcSecuritySilentRenew","initRenew","start_checksession","oidcSecurityCheckSession","init","pollServerSession","client_id","setupModule","OidcSecurityService","prototype","getUserData","_userData","asObservable","setUserData","userData","next","getIsAuthorized","_isAuthorized","setIsAuthorized","isAuthorized","_isAuthorizedValue","getToken","token","getAccessToken","decodeURIComponent","getIdToken","getPayloadFromIdToken","encode","oidcSecurityValidation","getPayloadFromToken","setState","state","authStateControl","getState","setCustomRequestParameters","params","customRequestParams","authorize","data","wellKnownEndpoints","authWellKnownEndpointsLoaded","logError","config_validate_response_type","response_type","resetAuthorizationData","Date","now","Math","random","nonce","authNonce","url","createAuthorizeUrl","authorization_endpoint","window","location","href","authorizedCallback","hash","silentRenew","silentRenewRunning","isRenewProcess","substr","result","split","reduce","item","parts","authResult","decoded_id_token","access_token","id_token","authResponseIsValid","getSigningKeys","jwtKeys","error","validateStateFromHashCallback","validate_signature_id_token","validate_id_token_nonce","validate_required_id_token","validate_id_token_iat_max_offset","max_id_token_iat_offset_allowed_in_seconds","validate_id_token_iss","issuer","validate_id_token_aud","validate_id_token_exp_not_expired","validate_id_token_at_hash","at_hash","successful_validation","logWarning","setAuthorizationData","auto_userinfo","getUserinfo","response","trigger_authorization_result_event","onAuthorizationResult","AuthorizationResult","authorized","router","navigate","post_login_route","unauthorized","unauthorized_route","idToken","Observable","observer","sessionState","session_state","complete","oidcSecurityUserService","initUserData","validate_userdata_sub_id_token","sub","accessToken","logoff","end_session_endpoint","id_token_hint","createEndSessionUrl","checkSessionChanged","auto_clean_state_after_authentication","refreshSession","startRenew","prompt","urlParts","authorizationUrl","HttpParams","fromString","encoder","UriEncoder","set","append","redirect_url","scope","hd_param","customParams","Object","assign","keys","forEach","key","toString","authorizationEndsessionUrl","post_logout_redirect_uri","resetStorageData","handleError","status","forbidden_route","onCheckSessionChanged","onUserDataChanged","lastUserData","value","jwks_uri","http","get","catch","handleErrorGetSigningKeys","errMsg","Response","body","json","err","JSON","stringify","statusText","message","console","throw","runTokenValidationRunning","timer","timeInterval","pluck","take","isTokenExpired","silent_renew_offset_in_seconds","decorators","type","Injectable","ctorParameters","Inject","args","PLATFORM_ID","HttpClient","AuthConfiguration","Router","OidcSecurityCheckSession","OidcSecuritySilentRenew","OidcSecurityUserService","OidcSecurityCommon","AuthWellKnownEndpoints","propDecorators","Output","AuthModule","forRoot","ngModule","providers","OidcSecurityValidation","DefaultConfiguration","provide","OidcSecurityStorage","useClass","storage","BrowserStorage","NgModule","resource","log_console_warning_active","log_console_debug_active","override_well_known_configuration","override_well_known_configuration_url","Storage","sessionStorage","OpenIDImplicitFlowConfiguration","defaultConfig","defineProperty","openIDImplicitFlowConfiguration","undefined","read","write","hasStorage","parse","getItem","setItem","oidcSecurityStorage","storage_auth_result","storage_access_token","storage_id_token","storage_is_authorized","storage_user_data","storage_auth_nonce","storage_auth_state_control","storage_well_known_endpoints","storage_session_state","storage_silent_renew_running","storage_custom_request_params","retrieve","store","warn","log","offsetSeconds","decoded","tokenExpirationDate","getTokenExpirationDate","valueOf","dataIdToken","validated","hasOwnProperty","max_offset_allowed_in_seconds","dateTime_iat_id_token","setUTCSeconds","iat","local_nonce","authWellKnownEndpoints_issuer","iss","aud","local_state","id_token_sub","userdata_sub","encoded","urlBase64Decode","getHeaderFromToken","getSignatureFromToken","jwtkeys","header_data","length","constructor","kid","alg","isValid","_d","_e","publickey","KEYUTIL","getKey","KJUR","jws","JWS","verify","amountOfMatchingKeys","_i","_a","kty","use","_b","_c","testdata","generate_at_hash","testValue","crypto","Util","hashString","first128bits","hextob64u","date","exp","str","output","replace","atob","EventEmitter","getWellKnownEndpoints","headers","HttpHeaders","token_endpoint","userinfo_endpoint","check_session_iframe","revocation_endpoint","introspection_endpoint","parent","document","getElementById","empty","sessionIframe","createElement","id","style","display","src","appendChild","iframeMessageEvent","messageHandler","bind","addEventListener","create","onload","clientId","contentWindow","postMessage","e","origin","source","existsparent","parentdoc","Error","exists","getIdentityUserData","map","forbidden","encodeKey","encodeURIComponent","encodeValue","decodeKey","decodeValue","BehaviorSubject"],"mappings":"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"}